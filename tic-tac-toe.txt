My log of what I did for tic tac toe hw.

made a template of project using npx create-react-app projname
created a github repo, and made sure my git commits were up to date - will be committing throughout proj and won't mention here for simplicity sake
cleared src/ contents and replaced with tutorial starter code
added feature where squares are rendered with their number
added feature where upon render of square the square's onClick is bound to function that changes contents inside to an X
added constructor for square class, and a states object called display that keeps track of whats in the square
added array to board class to keep track of status of whats in each square
passed onclick function for square from board to square in order to have each square class update their value in board's array
defined the handleclick function in board for onclick for square to work
replaced square class with a function because its simpler
added a inverter to switch between adding X and O
added a function check winner and winner display if someone wins
added if statement to prevent someone from changing a square already edited or if game over
added game component that keeps track of history of game
now, with new game component get rid of board constructor
have the board renderSquare pass to square the squares array and onClick atrributes from properties
update game's render function so it'll use history attributes most recent array for game status (last val in arr)
remove board's render code for game status - just needs to pass data to squares
move handleclick from board to game, and have it append game states to history
    concat doesn't mutate array, so we use concat not push
now, use maps to map turn number to game state
add to game render function in the return to dynamically generate list items (each item corresponds to turn number)
add attribute stepNumber to keep track of turns into the game
define function jumpTo to handle incrementing to next turn
update handleClick, to where if we go back in time and then make a move we can discard the would be future states
make the Game's render function render current status not last status



